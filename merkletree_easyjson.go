// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package merkletree

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree(in *jlexer.Lexer, out *hashSorter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree(out *jwriter.Writer, in hashSorter) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v hashSorter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v hashSorter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *hashSorter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *hashSorter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree(l, v)
}
func easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree1(in *jlexer.Lexer, out *MerkleTree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree1(out *jwriter.Writer, in MerkleTree) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MerkleTree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MerkleTree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MerkleTree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MerkleTree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree1(l, v)
}
func easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree2(in *jlexer.Lexer, out *Export) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "salt":
			out.Salt = bool(in.Bool())
		case "sorted":
			out.Sorted = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([][]uint8, 0, 2)
					} else {
						out.Data = [][]uint8{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []uint8
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						v1 = in.Bytes()
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([][]uint8, 0, 2)
					} else {
						out.Nodes = [][]uint8{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 []uint8
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						v3 = in.Bytes()
					}
					out.Nodes = append(out.Nodes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree2(out *jwriter.Writer, in Export) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Salt))
	}
	{
		const prefix string = ",\"sorted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Sorted))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Nodes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v10)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Export) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Export) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF2d597b2EncodeGithubComWealdtechGoMerkletree2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Export) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Export) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF2d597b2DecodeGithubComWealdtechGoMerkletree2(l, v)
}
